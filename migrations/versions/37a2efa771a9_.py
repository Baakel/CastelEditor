"""empty message

Revision ID: 37a2efa771a9
Revises: 50327363f789
Create Date: 2019-06-17 16:41:07.170031

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '37a2efa771a9'
down_revision = '50327363f789'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attackers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.drop_constraint('bb_assumptions_ibfk_2', 'bb_assumptions', type_='foreignkey')
    op.drop_constraint('bb_assumptions_ibfk_1', 'bb_assumptions', type_='foreignkey')
    op.create_foreign_key(None, 'bb_assumptions', 'bb_mechanisms', ['bb_id'], ['id'])
    op.create_foreign_key(None, 'bb_assumptions', 'assumptions', ['assumptions_id'], ['id'])
    op.drop_constraint('freq_serv_ibfk_2', 'freq_serv', type_='foreignkey')
    op.drop_constraint('freq_serv_ibfk_1', 'freq_serv', type_='foreignkey')
    op.create_foreign_key(None, 'freq_serv', 'sub_service', ['serv_id'], ['id'])
    op.create_foreign_key(None, 'freq_serv', 'functional_requirement', ['fr_id'], ['id'])
    op.drop_constraint('functional_requirement_ibfk_1', 'functional_requirement', type_='foreignkey')
    op.create_foreign_key(None, 'functional_requirement', 'projects', ['project_id'], ['id'])
    op.drop_constraint('good_ibfk_1', 'good', type_='foreignkey')
    op.create_foreign_key(None, 'good', 'projects', ['project_id'], ['id'])
    op.drop_constraint('good_stakeholder_ibfk_1', 'good_stakeholder', type_='foreignkey')
    op.drop_constraint('good_stakeholder_ibfk_2', 'good_stakeholder', type_='foreignkey')
    op.create_foreign_key(None, 'good_stakeholder', 'stakeholder', ['stakeholder_id'], ['id'])
    op.create_foreign_key(None, 'good_stakeholder', 'good', ['good_id'], ['id'])
    op.drop_constraint('hard_goal_ibfk_1', 'hard_goal', type_='foreignkey')
    op.create_foreign_key(None, 'hard_goal', 'projects', ['project_id'], ['id'])
    op.drop_constraint('hard_mechanism_ibfk_2', 'hard_mechanism', type_='foreignkey')
    op.drop_constraint('hard_mechanism_ibfk_1', 'hard_mechanism', type_='foreignkey')
    op.create_foreign_key(None, 'hard_mechanism', 'hard_goal', ['hg_id'], ['id'])
    op.create_foreign_key(None, 'hard_mechanism', 'bb_mechanisms', ['bbmech_id'], ['id'])
    op.drop_constraint('roles_users_ibfk_1', 'roles_users', type_='foreignkey')
    op.drop_constraint('roles_users_ibfk_2', 'roles_users', type_='foreignkey')
    op.create_foreign_key(None, 'roles_users', 'role', ['role_id'], ['id'])
    op.create_foreign_key(None, 'roles_users', 'users', ['user_id'], ['id'])
    op.drop_constraint('soft_goal_ibfk_1', 'soft_goal', type_='foreignkey')
    op.drop_constraint('soft_goal_ibfk_2', 'soft_goal', type_='foreignkey')
    op.create_foreign_key(None, 'soft_goal', 'hard_goal', ['hardgoal_id'], ['id'])
    op.create_foreign_key(None, 'soft_goal', 'projects', ['project_id'], ['id'])
    op.drop_constraint('stakeholder_ibfk_1', 'stakeholder', type_='foreignkey')
    op.create_foreign_key(None, 'stakeholder', 'projects', ['project_id'], ['id'])
    op.drop_constraint('sub_service_ibfk_1', 'sub_service', type_='foreignkey')
    op.create_foreign_key(None, 'sub_service', 'projects', ['project_id'], ['id'])
    op.drop_constraint('wprojects_ibfk_1', 'wprojects', type_='foreignkey')
    op.drop_constraint('wprojects_ibfk_2', 'wprojects', type_='foreignkey')
    op.create_foreign_key(None, 'wprojects', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(None, 'wprojects', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'wprojects', type_='foreignkey')
    op.drop_constraint(None, 'wprojects', type_='foreignkey')
    op.create_foreign_key('wprojects_ibfk_2', 'wprojects', 'users', ['user_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('wprojects_ibfk_1', 'wprojects', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'sub_service', type_='foreignkey')
    op.create_foreign_key('sub_service_ibfk_1', 'sub_service', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'stakeholder', type_='foreignkey')
    op.create_foreign_key('stakeholder_ibfk_1', 'stakeholder', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'soft_goal', type_='foreignkey')
    op.drop_constraint(None, 'soft_goal', type_='foreignkey')
    op.create_foreign_key('soft_goal_ibfk_2', 'soft_goal', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('soft_goal_ibfk_1', 'soft_goal', 'hard_goal', ['hardgoal_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'roles_users', type_='foreignkey')
    op.drop_constraint(None, 'roles_users', type_='foreignkey')
    op.create_foreign_key('roles_users_ibfk_2', 'roles_users', 'users', ['user_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('roles_users_ibfk_1', 'roles_users', 'role', ['role_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'hard_mechanism', type_='foreignkey')
    op.drop_constraint(None, 'hard_mechanism', type_='foreignkey')
    op.create_foreign_key('hard_mechanism_ibfk_1', 'hard_mechanism', 'bb_mechanisms', ['bbmech_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('hard_mechanism_ibfk_2', 'hard_mechanism', 'hard_goal', ['hg_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'hard_goal', type_='foreignkey')
    op.create_foreign_key('hard_goal_ibfk_1', 'hard_goal', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'good_stakeholder', type_='foreignkey')
    op.drop_constraint(None, 'good_stakeholder', type_='foreignkey')
    op.create_foreign_key('good_stakeholder_ibfk_2', 'good_stakeholder', 'stakeholder', ['stakeholder_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('good_stakeholder_ibfk_1', 'good_stakeholder', 'good', ['good_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'good', type_='foreignkey')
    op.create_foreign_key('good_ibfk_1', 'good', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'functional_requirement', type_='foreignkey')
    op.create_foreign_key('functional_requirement_ibfk_1', 'functional_requirement', 'projects', ['project_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'freq_serv', type_='foreignkey')
    op.drop_constraint(None, 'freq_serv', type_='foreignkey')
    op.create_foreign_key('freq_serv_ibfk_1', 'freq_serv', 'functional_requirement', ['fr_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('freq_serv_ibfk_2', 'freq_serv', 'sub_service', ['serv_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_constraint(None, 'bb_assumptions', type_='foreignkey')
    op.drop_constraint(None, 'bb_assumptions', type_='foreignkey')
    op.create_foreign_key('bb_assumptions_ibfk_1', 'bb_assumptions', 'assumptions', ['assumptions_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.create_foreign_key('bb_assumptions_ibfk_2', 'bb_assumptions', 'bb_mechanisms', ['bb_id'], ['id'], onupdate='RESTRICT', ondelete='RESTRICT')
    op.drop_table('attackers')
    # ### end Alembic commands ###
